import requests
from bs4 import BeautifulSoup
import time
import random
import re
import json
from datetime import datetime, timedelta
from config import HEADERS, AVITO_SEARCH_URL, TARGET_METRO_STATIONS, FILTER_CRITERIA


class AvitoScraper:
    def __init__(self):
        self.headers = HEADERS
        self.base_url = "https://www.avito.ru"

    def get_apartments(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å Avito —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API Avito –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            api_url = self.convert_search_url_to_api()

            response = requests.get(api_url, headers=self.headers)
            response.raise_for_status()

            data = response.json()
            apartments = []

            if 'items' in data:
                for item in data['items']:
                    apartment_data = self.parse_apartment_from_api(item)
                    if apartment_data and self.meets_criteria(apartment_data):
                        apartments.append(apartment_data)

            return apartments

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥: {e}")
            return self.get_apartments_html_fallback()

    def convert_search_url_to_api(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è URL –ø–æ–∏—Å–∫–∞ –≤ API –∑–∞–ø—Ä–æ—Å"""
        api_url = "https://www.avito.ru/web/1/main/items"

        params = {
            'locationId': '637640',  # –ú–æ—Å–∫–≤–∞
            'categoryId': '24',  # –ö–≤–∞—Ä—Ç–∏—Ä—ã
            'params[549]': '1059',  # –ê—Ä–µ–Ω–¥–∞
            'params': '1,2',  # 1-2 –∫–æ–º–Ω–∞—Ç–Ω—ã–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
            'priceMax': '75000',
            'areaMin': '35',
            'sort': 'date',
            'limit': '50',
            'page': '1'
        }

        param_string = '&'.join([f"{k}={v}" for k, v in params.items()])
        return f"{api_url}?{param_string}"

    def parse_apartment_from_api(self, item):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã - –°–ï–ì–û–î–ù–Ø –ò –í–ß–ï–†–ê
            if not self.is_recent_listing(item):
                return None

            apartment_id = item.get('id', '')
            title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_info = item.get('priceDetailing', {})
            price_value = price_info.get('value', 0)
            price_text = f"{price_value:,} ‚ÇΩ" if price_value else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–æ
            location_info = item.get('location', {})
            location = location_info.get('name', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ
            metro_info = self.extract_metro_from_api_item(item)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
            url = f"https://www.avito.ru{item.get('urlPath', '')}"

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = item.get('images', [])
            image_url = images[0].get('636x476') if images else ""

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            description = item.get('description', '')
            rooms, area = self.extract_apartment_params_from_api(item)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            listing_age = self.get_listing_age(item)

            return {
                'id': apartment_id,
                'title': title,
                'price': price_text,
                'price_num': price_value,
                'location': location,
                'metro_info': metro_info,
                'url': url,
                'image_url': image_url,
                'description': description,
                'rooms': rooms,
                'area': area,
                'date_published': item.get('sortTimeStamp', 0),
                'listing_age': listing_age  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
            }

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API: {e}")
            return None

    def is_recent_listing(self, item):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞"""
        try:
            timestamp = item.get('sortTimeStamp', 0)
            if timestamp:
                listing_date = datetime.fromtimestamp(timestamp)
                today = datetime.now().date()
                yesterday = today - timedelta(days=1)

                listing_day = listing_date.date()
                return listing_day == today or listing_day == yesterday
            return False
        except:
            return False

    def get_listing_age(self, item):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            timestamp = item.get('sortTimeStamp', 0)
            if timestamp:
                listing_date = datetime.fromtimestamp(timestamp)
                today = datetime.now().date()

                if listing_date.date() == today:
                    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
                    hours_ago = (datetime.now() - listing_date).total_seconds() / 3600
                    if hours_ago < 1:
                        return "üìÖ –¢–æ–ª—å–∫–æ —á—Ç–æ"
                    elif hours_ago < 24:
                        return f"üìÖ {int(hours_ago)} —á –Ω–∞–∑–∞–¥"
                    else:
                        return "üìÖ –°–µ–≥–æ–¥–Ω—è"
                else:
                    return "üìÖ –í—á–µ—Ä–∞"
            return "üìÖ –ù–µ–¥–∞–≤–Ω–æ"
        except:
            return "üìÖ –ù–µ–¥–∞–≤–Ω–æ"

    def extract_metro_from_api_item(self, item):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ –∏–∑ API"""
        metro_info = {'stations': [], 'time': None}

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö API –æ—Ç–≤–µ—Ç–∞
            geo = item.get('geo', {})
            references = geo.get('references', [])

            for ref in references:
                ref_text = str(ref).lower()

                # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–µ—Ç—Ä–æ
                time_match = re.search(r'(\d+)\s*–º–∏–Ω', ref_text)
                if time_match:
                    metro_info['time'] = int(time_match.group(1))

                # –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
                for station in TARGET_METRO_STATIONS:
                    if station in ref_text:
                        metro_info['stations'].append(station)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            full_text = (item.get('title', '') + ' ' + item.get('description', '')).lower()
            for station in TARGET_METRO_STATIONS:
                if station in full_text and station not in metro_info['stations']:
                    metro_info['stations'].append(station)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ: {e}")

        return metro_info

    def extract_apartment_params_from_api(self, item):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ API"""
        rooms = None
        area = None

        try:
            params = item.get('params', {})

            # –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            if 'rooms' in params:
                rooms = int(params['rooms'])
            else:
                title = item.get('title', '').lower()
                room_match = re.search(r'(\d+)-–∫', title)
                if room_match:
                    rooms = int(room_match.group(1))

            # –ü–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–∏
            if 'area' in params:
                area = float(params['area'])
            else:
                full_text = item.get('title', '') + ' ' + item.get('description', '')
                area_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', full_text)
                if area_match:
                    area = float(area_match.group(1).replace(',', '.'))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

        return rooms, area

    def get_apartments_html_fallback(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ HTML"""
        try:
            response = requests.get(AVITO_SEARCH_URL, headers=self.headers)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            apartments = []

            apartment_cards = soup.find_all('div', {'data-marker': 'item'})

            for card in apartment_cards:
                apartment_data = self.parse_apartment_card_updated(card)
                if apartment_data and self.meets_criteria(apartment_data):
                    apartments.append(apartment_data)

            return apartments

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return []

    def parse_apartment_card_updated(self, card):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –°–ï–ì–û–î–ù–Ø –ò –í–ß–ï–†–ê
            date_elem = card.find('div', {'data-marker': 'item-date'})
            listing_age = "üìÖ –ù–µ–¥–∞–≤–Ω–æ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if date_elem:
                if not self.is_recent_from_text(date_elem.text):
                    return None
                listing_age = self.format_date_from_text(date_elem.text)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = card.find('a', {'data-marker': 'item-title'})
            title = title_elem.text.strip() if title_elem else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            # –¶–µ–Ω–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            price_elem = card.find('span', {'data-marker': 'item-price'})
            if not price_elem:
                price_elem = card.find('meta', {'itemprop': 'price'})
                if price_elem:
                    price_value = int(price_elem.get('content', 0))
                    price = f"{price_value:,} ‚ÇΩ"
                else:
                    price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    price_value = 0
            else:
                price = price_elem.text.strip()
                price_value = self.extract_price_number(price)

            # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –º–µ—Ç—Ä–æ
            address_elem = card.find('div', {'data-marker': 'item-address'})
            location = address_elem.text.strip() if address_elem else "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–æ
            metro_info = self.extract_metro_from_html(card)

            # –°—Å—ã–ª–∫–∞
            url = self.base_url + title_elem['href'] if title_elem and title_elem.get('href') else ""

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_elem = card.find('img', {'data-marker': 'item-photo'})
            if not img_elem:
                img_elem = card.find('img')
            image_url = img_elem['src'] if img_elem else ""

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_elem = card.find('div', {'data-marker': 'item-specific-params'})
            if not desc_elem:
                desc_elem = card.find('p', class_='item-description-text')
            description = desc_elem.text.strip() if desc_elem else ""

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
            rooms, area = self.extract_apartment_params(title, description)

            return {
                'title': title,
                'price': price,
                'price_num': price_value,
                'location': location,
                'metro_info': metro_info,
                'url': url,
                'image_url': image_url,
                'description': description,
                'rooms': rooms,
                'area': area,
                'listing_age': listing_age
            }

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None

    def is_recent_from_text(self, date_text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞"""
        date_text = date_text.lower().strip()

        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ
        today_keywords = ['—Å–µ–≥–æ–¥–Ω—è', '—Ç–æ–ª—å–∫–æ —á—Ç–æ', '–º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥', '—á–∞—Å –Ω–∞–∑–∞–¥', '—á–∞—Å–∞ –Ω–∞–∑–∞–¥', '—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥']

        # –í—á–µ—Ä–∞—à–Ω–∏–µ
        yesterday_keywords = ['–≤—á–µ—Ä–∞']

        return (any(keyword in date_text for keyword in today_keywords) or
                any(keyword in date_text for keyword in yesterday_keywords))

    def format_date_from_text(self, date_text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        date_text = date_text.lower().strip()

        if '—Ç–æ–ª—å–∫–æ —á—Ç–æ' in date_text or '–º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥' in date_text:
            return "üìÖ –¢–æ–ª—å–∫–æ —á—Ç–æ"
        elif any(word in date_text for word in ['—á–∞—Å –Ω–∞–∑–∞–¥', '—á–∞—Å–∞ –Ω–∞–∑–∞–¥', '—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥']):
            return "üìÖ –ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        elif '—Å–µ–≥–æ–¥–Ω—è' in date_text:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è"
        elif '–≤—á–µ—Ä–∞' in date_text:
            return "üìÖ –í—á–µ—Ä–∞"
        else:
            return "üìÖ –ù–µ–¥–∞–≤–Ω–æ"

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def extract_metro_from_html(self, card):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ –∏–∑ HTML"""
        metro_info = {'stations': [], 'time': None}

        try:
            metro_elems = card.find_all('span', string=re.compile('–º–∏–Ω|–º–µ—Ç—Ä–æ', re.I))

            for elem in metro_elems:
                text = elem.text.lower()

                time_match = re.search(r'(\d+)\s*–º–∏–Ω', text)
                if time_match:
                    metro_info['time'] = int(time_match.group(1))

                for station in TARGET_METRO_STATIONS:
                    if station in text:
                        metro_info['stations'].append(station)

            full_text = card.get_text().lower()
            for station in TARGET_METRO_STATIONS:
                if station in full_text and station not in metro_info['stations']:
                    metro_info['stations'].append(station)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ –∏–∑ HTML: {e}")

        return metro_info

    def extract_apartment_params(self, title, description):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –∏ –ø–ª–æ—â–∞–¥–∏"""
        rooms = None
        area = None

        room_patterns = [r'(\d+)-–∫', r'(\d+)\s*–∫–æ–º–Ω', r'(\d+)-–∫–æ–º–Ω']

        for pattern in room_patterns:
            match = re.search(pattern, title.lower())
            if match:
                rooms = int(match.group(1))
                break

        area_patterns = [
            r'(\d+(?:[.,]\d+)?)\s*–º¬≤',
            r'(\d+(?:[.,]\d+)?)\s*–∫–≤\.?–º',
            r'–ø–ª–æ—â–∞–¥—å[:\s]+(\d+(?:[.,]\d+)?)'
        ]

        full_text = title + ' ' + description
        for pattern in area_patterns:
            match = re.search(pattern, full_text.lower())
            if match:
                area = float(match.group(1).replace(',', '.'))
                break

        return rooms, area

    def extract_price_number(self, price_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        try:
            numbers = re.findall(r'\d+', price_text.replace(' ', ''))
            if numbers:
                return int(''.join(numbers))
        except:
            pass
        return None

    def meets_criteria(self, apartment_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            if apartment_data.get('price_num') and apartment_data['price_num'] > FILTER_CRITERIA['max_price']:
                return False

            if apartment_data.get('area') and apartment_data['area'] < FILTER_CRITERIA['min_area']:
                return False

            if apartment_data.get('rooms') and apartment_data['rooms'] not in FILTER_CRITERIA['rooms']:
                return False

            metro_time = apartment_data['metro_info'].get('time')
            if metro_time and metro_time > FILTER_CRITERIA['max_metro_time']:
                return False

            metro_stations = apartment_data['metro_info'].get('stations', [])
            if metro_stations:
                return any(station in TARGET_METRO_STATIONS for station in metro_stations)
            else:
                full_text = (apartment_data.get('title', '') + ' ' +
                             apartment_data.get('description', '')).lower()
                return any(station in full_text for station in TARGET_METRO_STATIONS)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return True

    def add_random_delay(self):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        time.sleep(random.uniform(5, 12))
