import schedule
import time
from datetime import datetime
from avito_scraper import AvitoScraper
from telegram_bot import TelegramBot
from database import ApartmentDB
from config import CHECK_INTERVAL


class ApartmentMonitor:
    def __init__(self):
        self.scraper = AvitoScraper()
        self.bot = TelegramBot()
        self.db = ApartmentDB()

    def check_new_apartments(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä"""
        current_time = datetime.now()
        print(f"[{current_time}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞...")

        try:
            apartments = self.scraper.get_apartments()
            new_apartments_count = 0

            for apartment in apartments:
                if self.db.is_new_apartment(apartment):
                    print(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞: {apartment['title'][:50]}... ({apartment.get('listing_age', '–Ω–µ–¥–∞–≤–Ω–æ')})")

                    self.bot.send_apartment_notification(apartment)
                    self.db.add_apartment(apartment)

                    new_apartments_count += 1
                    time.sleep(3)

            if new_apartments_count > 0:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {new_apartments_count}")
                self.bot.send_status_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_apartments_count} –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            else:
                print("üì≠ –ù–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            self.scraper.add_random_delay()

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"
            print(error_msg)
            self.bot.send_message(error_msg)

    def daily_cleanup(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            deleted = self.db.clean_old_apartments(days_old=7)
            if deleted > 0:
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã: {e}")

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ Avito...")
        print("üìÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –°–ï–ì–û–î–ù–Ø–®–ù–ò–ï –ò –í–ß–ï–†–ê–®–ù–ò–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

        self.bot.send_status_message("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω ‚úÖ\nüìÖ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–µ–≥–æ–¥–Ω—è + –≤—á–µ—Ä–∞")

        schedule.every(CHECK_INTERVAL).seconds.do(self.check_new_apartments)
        schedule.every().day.at("06:00").do(self.daily_cleanup)

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.check_new_apartments()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            schedule.run_pending()
            time.sleep(30)


if __name__ == "__main__":
    monitor = ApartmentMonitor()
    monitor.start_monitoring()
