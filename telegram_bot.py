import requests
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, FILTER_CRITERIA


class TelegramBot:
    def __init__(self):
        self.token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.token}"

    def send_apartment_notification(self, apartment_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ"""
        try:
            message = self.format_apartment_message(apartment_data)

            if apartment_data['image_url']:
                self.send_photo_with_caption(apartment_data['image_url'], message)
            else:
                self.send_message(message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def format_apartment_message(self, apartment_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ"""

        quality_emoji = self.get_quality_emoji(apartment_data)
        metro_text = self.format_metro_info(apartment_data['metro_info'])
        repair_info = self.check_repair_quality(apartment_data['title'], apartment_data['description'])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        listing_age = apartment_data.get('listing_age', 'üìÖ –ù–µ–¥–∞–≤–Ω–æ')

        message = f"""
{quality_emoji} **–ù–û–í–ê–Ø –ö–í–ê–†–¢–ò–†–ê –ù–ê–ô–î–ï–ù–ê!**

{listing_age}

üè† **{apartment_data['title']}**

üí∞ **–¶–µ–Ω–∞:** {apartment_data['price']}
üìè **–ü–ª–æ—â–∞–¥—å:** {apartment_data.get('area', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤
üöá **–ú–µ—Ç—Ä–æ:** {metro_text}
üìç **–ê–¥—Ä–µ—Å:** {apartment_data['location']}

{repair_info}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** 
{apartment_data['description'][:300]}{'...' if len(apartment_data['description']) > 300 else ''}

üîó [**–ü–û–°–ú–û–¢–†–ï–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï**]({apartment_data['url']})

‚ö° *–ë—ã—Å—Ç—Ä–µ–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É!*
        """
        return message.strip()

    def get_quality_emoji(self, apartment_data):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        score = 0

        text = (apartment_data['title'] + ' ' + apartment_data['description']).lower()
        if any(repair in text for repair in FILTER_CRITERIA['preferred_repair']):
            score += 2

        koltso_stations = {'–∫–∏–µ–≤—Å–∫–∞—è', '–ø–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã', '–æ–∫—Ç—è–±—Ä—å—Å–∫–∞—è', '–¥–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è',
                           '–ø–∞–≤–µ–ª–µ—Ü–∫–∞—è', '—Ç–∞–≥–∞–Ω—Å–∫–∞—è', '–∫—É—Ä—Å–∫–∞—è', '–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è',
                           '–ø—Ä–æ—Å–ø–µ–∫—Ç –º–∏—Ä–∞', '–Ω–æ–≤–æ—Å–ª–æ–±–æ–¥—Å–∫–∞—è', '–±–µ–ª–æ—Ä—É—Å—Å–∫–∞—è', '–∫—Ä–∞—Å–Ω–æ–ø—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è'}
        if any(station in koltso_stations for station in apartment_data['metro_info']['stations']):
            score += 2

        if apartment_data['metro_info']['time'] and apartment_data['metro_info']['time'] <= 10:
            score += 1

        if apartment_data['price_num'] and apartment_data['price_num'] < 60000:
            score += 1

        if score >= 4:
            return "üî•üî•üî•"
        elif score >= 2:
            return "‚≠ê‚≠ê"
        else:
            return "üè†"

    def format_metro_info(self, metro_info):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ"""
        if not metro_info['stations']:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        stations_text = ", ".join(metro_info['stations'][:3])
        if len(metro_info['stations']) > 3:
            stations_text += f" –∏ –µ—â–µ {len(metro_info['stations']) - 3}"

        time_text = f" ({metro_info['time']} –º–∏–Ω)" if metro_info['time'] else ""

        return f"{stations_text}{time_text}"

    def check_repair_quality(self, title, description):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–º–æ–Ω—Ç–∞"""
        text = (title + ' ' + description).lower()

        if any(repair in text for repair in ['–µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç', '–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π']):
            return "‚ú® **–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç** - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!"
        elif any(repair in text for repair in ['—Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç', '–ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞']):
            return "üî® **–•–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç** - –≤ –ø–æ—Ä—è–¥–∫–µ"
        elif any(repair in text for repair in ['–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π', '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞']):
            return "üöß **–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞** - –Ω–æ —Ü–µ–Ω–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è"
        else:
            return "üèóÔ∏è **–†–µ–º–æ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω** - —É—Ç–æ—á–Ω–∏—Ç–µ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞"

    def send_photo_with_caption(self, photo_url, caption):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        url = f"{self.base_url}/sendPhoto"

        payload = {
            'chat_id': self.chat_id,
            'photo': photo_url,
            'caption': caption[:1024],
            'parse_mode': 'Markdown'
        }

        response = requests.post(url, json=payload)
        return response.json()

    def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/sendMessage"

        payload = {
            'chat_id': self.chat_id,
            'text': text[:4096],
            'parse_mode': 'Markdown',
            'disable_web_page_preview': False
        }

        response = requests.post(url, json=payload)
        return response.json()

    def send_status_message(self, status):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}"
        self.send_message(message)
